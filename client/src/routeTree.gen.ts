/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedImport } from './routes/_authenticated'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const AuthenticatedTransactionsLazyImport = createFileRoute(
  '/_authenticated/transactions',
)()
const AuthenticatedCreateLazyImport = createFileRoute(
  '/_authenticated/create',
)()
const AuthenticatedAnalyticsLazyImport = createFileRoute(
  '/_authenticated/analytics',
)()

// Create/Update Routes

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AuthenticatedTransactionsLazyRoute =
  AuthenticatedTransactionsLazyImport.update({
    path: '/transactions',
    getParentRoute: () => AuthenticatedRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/transactions.lazy').then((d) => d.Route),
  )

const AuthenticatedCreateLazyRoute = AuthenticatedCreateLazyImport.update({
  path: '/create',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() =>
  import('./routes/_authenticated/create.lazy').then((d) => d.Route),
)

const AuthenticatedAnalyticsLazyRoute = AuthenticatedAnalyticsLazyImport.update(
  {
    path: '/analytics',
    getParentRoute: () => AuthenticatedRoute,
  } as any,
).lazy(() =>
  import('./routes/_authenticated/analytics.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/analytics': {
      id: '/_authenticated/analytics'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AuthenticatedAnalyticsLazyImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/create': {
      id: '/_authenticated/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof AuthenticatedCreateLazyImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/transactions': {
      id: '/_authenticated/transactions'
      path: '/transactions'
      fullPath: '/transactions'
      preLoaderRoute: typeof AuthenticatedTransactionsLazyImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  AuthenticatedRoute: AuthenticatedRoute.addChildren({
    AuthenticatedAnalyticsLazyRoute,
    AuthenticatedCreateLazyRoute,
    AuthenticatedTransactionsLazyRoute,
  }),
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/analytics",
        "/_authenticated/create",
        "/_authenticated/transactions"
      ]
    },
    "/_authenticated/analytics": {
      "filePath": "_authenticated/analytics.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/create": {
      "filePath": "_authenticated/create.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/transactions": {
      "filePath": "_authenticated/transactions.lazy.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
